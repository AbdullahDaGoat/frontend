import { useState } from 'react';
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
  InputOTPSeparator,
} from "@/components/ui/input-otp";
import { useIsMobile } from '@/hooks/use-ismobile';
import { createFileRoute } from "@tanstack/react-router";
import { useRouter } from "@tanstack/react-router";

export const Route = createFileRoute("/login")({
  component: Login,
});

// yummy cookies
const getCookieValue = (name) => {
  const cookies = document.cookie.split("; ");
  for (let i = 0; i < cookies.length; i++) {
    const [cookieName, cookieValue] = cookies[i].split("=");
    if (cookieName === name) {
      return cookieValue;
    }
  }
  return "";
};

async function authenticateUser(userNums, userId, turnstileToken) {
  try {
    const url = "https://backend.bookracy.org/api/_secure/signin/identifier";
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: userNums,
        ttkn: turnstileToken,
        uid: userId, // uid generated by the obfuscated js in index.html
      }),
    });
    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error("Error authenticating user:", error);
    return null;
  }
}

function Login() {
  const [code, setCode] = useState("");
  const { isMobile } = useIsMobile();
  const { navigate } = useRouter(); // BRO SOMEONE HELP ME WITH THIS
  const handleLogin = async () => {
    if (code.length === 12) {
      const authKey = getCookieValue("authKey");
      const userId = getCookieValue("userId");
      const userNums = code.replace(/\s/g, "").replace(/(\d{3})(?=\d)/g, "$1 "); // split into groups of 3, ty co-pilot

      console.log(userNums);
      if (!authKey || !userId) {
        console.error("AuthKey or UserId is missing");
        return;
      }

      const token = await authenticateUser(userNums, userId, authKey);

      if (token) {
        // need to use Authorization: Bearer ${token} for future reqs
        document.cookie = `jwt_token=${token}; path=/`;

        navigate("/dashboard"); // I DONT FKN KNO HOW TO DO THIS
      } else {
        console.error("Failed to authenticate");
      }
    }
  };

  return (
    <div className="flex h-full w-full justify-center items-center">
      <Card>
        <CardHeader>
          <div className="flex flex-col gap-4">
            <CardTitle>Login</CardTitle>
            <CardDescription className="flex flex-col gap-3">
              <Label>12 Digit Code</Label>
              {isMobile ? (
                <InputOTP maxLength={12} onChange={(code: string) => setCode(code)}>
                  <div className="flex flex-wrap gap-2 justify-center items-center">
                    <InputOTPGroup>
                      <InputOTPSlot index={0} />
                      <InputOTPSlot index={1} />
                      <InputOTPSlot index={2} />
                      <InputOTPSlot index={3} />
                      <InputOTPSlot index={4} />
                      <InputOTPSlot index={5} />
                    </InputOTPGroup>
                    <InputOTPGroup>
                      <InputOTPSlot index={6} />
                      <InputOTPSlot index={7} />
                      <InputOTPSlot index={8} />
                      <InputOTPSlot index={9} />
                      <InputOTPSlot index={10} />
                      <InputOTPSlot index={11} />
                    </InputOTPGroup>
                  </div>
                </InputOTP>
              ) : (
                <InputOTP maxLength={12} onChange={(code: string) => setCode(code)}>
                  <div className="flex flex-wrap gap-2 justify-center items-center">
                    <InputOTPGroup>
                      <InputOTPSlot index={0} />
                      <InputOTPSlot index={1} />
                      <InputOTPSlot index={2} />
                      <InputOTPSlot index={3} />
                    </InputOTPGroup>
                    <InputOTPSeparator />
                    <InputOTPGroup>
                      <InputOTPSlot index={4} />
                      <InputOTPSlot index={5} />
                      <InputOTPSlot index={6} />
                      <InputOTPSlot index={7} />
                    </InputOTPGroup>
                    <InputOTPSeparator />
                    <InputOTPGroup>
                      <InputOTPSlot index={8} />
                      <InputOTPSlot index={9} />
                      <InputOTPSlot index={10} />
                      <InputOTPSlot index={11} />
                    </InputOTPGroup>
                  </div>
                </InputOTP>
              )}
              <Button disabled={code.replace(/\s/g, "").length !== 12} onClick={handleLogin}>
                Continue
              </Button>
            </CardDescription>
          </div>
        </CardHeader>
      </Card>
    </div>
  );
}
